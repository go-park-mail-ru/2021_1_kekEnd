// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_kekEnd/internal/playlists (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_1_kekEnd/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockPlaylistsRepository is a mock of Repository interface.
type MockPlaylistsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlaylistsRepositoryMockRecorder
}

// MockPlaylistsRepositoryMockRecorder is the mock recorder for MockPlaylistsRepository.
type MockPlaylistsRepositoryMockRecorder struct {
	mock *MockPlaylistsRepository
}

// NewMockPlaylistsRepository creates a new mock instance.
func NewMockPlaylistsRepository(ctrl *gomock.Controller) *MockPlaylistsRepository {
	mock := &MockPlaylistsRepository{ctrl: ctrl}
	mock.recorder = &MockPlaylistsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaylistsRepository) EXPECT() *MockPlaylistsRepositoryMockRecorder {
	return m.recorder
}

// AddMovieToPlaylist mocks base method.
func (m *MockPlaylistsRepository) AddMovieToPlaylist(arg0 string, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovieToPlaylist", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMovieToPlaylist indicates an expected call of AddMovieToPlaylist.
func (mr *MockPlaylistsRepositoryMockRecorder) AddMovieToPlaylist(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovieToPlaylist", reflect.TypeOf((*MockPlaylistsRepository)(nil).AddMovieToPlaylist), arg0, arg1, arg2)
}

// AddUserToPlaylist mocks base method.
func (m *MockPlaylistsRepository) AddUserToPlaylist(arg0 string, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToPlaylist", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToPlaylist indicates an expected call of AddUserToPlaylist.
func (mr *MockPlaylistsRepositoryMockRecorder) AddUserToPlaylist(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToPlaylist", reflect.TypeOf((*MockPlaylistsRepository)(nil).AddUserToPlaylist), arg0, arg1, arg2)
}

// CanUserUpdateMovieInPlaylist mocks base method.
func (m *MockPlaylistsRepository) CanUserUpdateMovieInPlaylist(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanUserUpdateMovieInPlaylist", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanUserUpdateMovieInPlaylist indicates an expected call of CanUserUpdateMovieInPlaylist.
func (mr *MockPlaylistsRepositoryMockRecorder) CanUserUpdateMovieInPlaylist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanUserUpdateMovieInPlaylist", reflect.TypeOf((*MockPlaylistsRepository)(nil).CanUserUpdateMovieInPlaylist), arg0, arg1)
}

// CanUserUpdatePlaylist mocks base method.
func (m *MockPlaylistsRepository) CanUserUpdatePlaylist(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanUserUpdatePlaylist", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanUserUpdatePlaylist indicates an expected call of CanUserUpdatePlaylist.
func (mr *MockPlaylistsRepositoryMockRecorder) CanUserUpdatePlaylist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanUserUpdatePlaylist", reflect.TypeOf((*MockPlaylistsRepository)(nil).CanUserUpdatePlaylist), arg0, arg1)
}

// CanUserUpdateUsersInPlaylist mocks base method.
func (m *MockPlaylistsRepository) CanUserUpdateUsersInPlaylist(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanUserUpdateUsersInPlaylist", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanUserUpdateUsersInPlaylist indicates an expected call of CanUserUpdateUsersInPlaylist.
func (mr *MockPlaylistsRepositoryMockRecorder) CanUserUpdateUsersInPlaylist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanUserUpdateUsersInPlaylist", reflect.TypeOf((*MockPlaylistsRepository)(nil).CanUserUpdateUsersInPlaylist), arg0, arg1)
}

// CreatePlaylist mocks base method.
func (m *MockPlaylistsRepository) CreatePlaylist(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlaylist", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlaylist indicates an expected call of CreatePlaylist.
func (mr *MockPlaylistsRepositoryMockRecorder) CreatePlaylist(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlaylist", reflect.TypeOf((*MockPlaylistsRepository)(nil).CreatePlaylist), arg0, arg1, arg2)
}

// DeleteAllUserFromPlaylist mocks base method.
func (m *MockPlaylistsRepository) DeleteAllUserFromPlaylist(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllUserFromPlaylist", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllUserFromPlaylist indicates an expected call of DeleteAllUserFromPlaylist.
func (mr *MockPlaylistsRepositoryMockRecorder) DeleteAllUserFromPlaylist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllUserFromPlaylist", reflect.TypeOf((*MockPlaylistsRepository)(nil).DeleteAllUserFromPlaylist), arg0, arg1)
}

// DeleteMovieFromPlaylist mocks base method.
func (m *MockPlaylistsRepository) DeleteMovieFromPlaylist(arg0 string, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovieFromPlaylist", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovieFromPlaylist indicates an expected call of DeleteMovieFromPlaylist.
func (mr *MockPlaylistsRepositoryMockRecorder) DeleteMovieFromPlaylist(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovieFromPlaylist", reflect.TypeOf((*MockPlaylistsRepository)(nil).DeleteMovieFromPlaylist), arg0, arg1, arg2)
}

// DeletePlaylist mocks base method.
func (m *MockPlaylistsRepository) DeletePlaylist(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlaylist", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlaylist indicates an expected call of DeletePlaylist.
func (mr *MockPlaylistsRepositoryMockRecorder) DeletePlaylist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlaylist", reflect.TypeOf((*MockPlaylistsRepository)(nil).DeletePlaylist), arg0)
}

// DeleteUserFromPlaylist mocks base method.
func (m *MockPlaylistsRepository) DeleteUserFromPlaylist(arg0 string, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromPlaylist", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromPlaylist indicates an expected call of DeleteUserFromPlaylist.
func (mr *MockPlaylistsRepositoryMockRecorder) DeleteUserFromPlaylist(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromPlaylist", reflect.TypeOf((*MockPlaylistsRepository)(nil).DeleteUserFromPlaylist), arg0, arg1, arg2)
}

// GetPlaylist mocks base method.
func (m *MockPlaylistsRepository) GetPlaylist(arg0 int) (*models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylist", arg0)
	ret0, _ := ret[0].(*models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylist indicates an expected call of GetPlaylist.
func (mr *MockPlaylistsRepositoryMockRecorder) GetPlaylist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylist", reflect.TypeOf((*MockPlaylistsRepository)(nil).GetPlaylist), arg0)
}

// GetPlaylists mocks base method.
func (m *MockPlaylistsRepository) GetPlaylists(arg0 string) ([]models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylists", arg0)
	ret0, _ := ret[0].([]models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylists indicates an expected call of GetPlaylists.
func (mr *MockPlaylistsRepositoryMockRecorder) GetPlaylists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylists", reflect.TypeOf((*MockPlaylistsRepository)(nil).GetPlaylists), arg0)
}

// GetPlaylistsInfo mocks base method.
func (m *MockPlaylistsRepository) GetPlaylistsInfo(arg0 string, arg1 int) ([]models.PlaylistsInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylistsInfo", arg0, arg1)
	ret0, _ := ret[0].([]models.PlaylistsInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistsInfo indicates an expected call of GetPlaylistsInfo.
func (mr *MockPlaylistsRepositoryMockRecorder) GetPlaylistsInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistsInfo", reflect.TypeOf((*MockPlaylistsRepository)(nil).GetPlaylistsInfo), arg0, arg1)
}

// UpdatePlaylist mocks base method.
func (m *MockPlaylistsRepository) UpdatePlaylist(arg0 string, arg1 int, arg2 string, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlaylist", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlaylist indicates an expected call of UpdatePlaylist.
func (mr *MockPlaylistsRepositoryMockRecorder) UpdatePlaylist(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaylist", reflect.TypeOf((*MockPlaylistsRepository)(nil).UpdatePlaylist), arg0, arg1, arg2, arg3)
}
