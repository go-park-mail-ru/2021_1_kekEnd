// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_kekEnd/internal/movies (interfaces: MovieRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_1_kekEnd/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMovieRepository is a mock of MovieRepository interface.
type MockMovieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepositoryMockRecorder
}

// MockMovieRepositoryMockRecorder is the mock recorder for MockMovieRepository.
type MockMovieRepositoryMockRecorder struct {
	mock *MockMovieRepository
}

// NewMockMovieRepository creates a new mock instance.
func NewMockMovieRepository(ctrl *gomock.Controller) *MockMovieRepository {
	mock := &MockMovieRepository{ctrl: ctrl}
	mock.recorder = &MockMovieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepository) EXPECT() *MockMovieRepositoryMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockMovieRepository) CreateMovie(arg0 *models.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMovieRepositoryMockRecorder) CreateMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieRepository)(nil).CreateMovie), arg0)
}

// GetAllGenres mocks base method.
func (m *MockMovieRepository) GetAllGenres() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGenres")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGenres indicates an expected call of GetAllGenres.
func (mr *MockMovieRepositoryMockRecorder) GetAllGenres() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGenres", reflect.TypeOf((*MockMovieRepository)(nil).GetAllGenres))
}

// GetBestMovies mocks base method.
func (m *MockMovieRepository) GetBestMovies(arg0 int, arg1 string) (int, []*models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBestMovies", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]*models.Movie)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBestMovies indicates an expected call of GetBestMovies.
func (mr *MockMovieRepositoryMockRecorder) GetBestMovies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBestMovies", reflect.TypeOf((*MockMovieRepository)(nil).GetBestMovies), arg0, arg1)
}

// GetMovieByID mocks base method.
func (m *MockMovieRepository) GetMovieByID(arg0, arg1 string) (*models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByID", arg0, arg1)
	ret0, _ := ret[0].(*models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByID indicates an expected call of GetMovieByID.
func (mr *MockMovieRepositoryMockRecorder) GetMovieByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByID", reflect.TypeOf((*MockMovieRepository)(nil).GetMovieByID), arg0, arg1)
}

// GetMoviesByGenres mocks base method.
func (m *MockMovieRepository) GetMoviesByGenres(arg0 []string, arg1 int, arg2 string) (int, []*models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesByGenres", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]*models.Movie)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMoviesByGenres indicates an expected call of GetMoviesByGenres.
func (mr *MockMovieRepositoryMockRecorder) GetMoviesByGenres(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesByGenres", reflect.TypeOf((*MockMovieRepository)(nil).GetMoviesByGenres), arg0, arg1, arg2)
}

// GetSimilar mocks base method.
func (m *MockMovieRepository) GetSimilar(arg0 string) ([]models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimilar", arg0)
	ret0, _ := ret[0].([]models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSimilar indicates an expected call of GetSimilar.
func (mr *MockMovieRepositoryMockRecorder) GetSimilar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimilar", reflect.TypeOf((*MockMovieRepository)(nil).GetSimilar), arg0)
}

// MarkUnwatched mocks base method.
func (m *MockMovieRepository) MarkUnwatched(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkUnwatched", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkUnwatched indicates an expected call of MarkUnwatched.
func (mr *MockMovieRepositoryMockRecorder) MarkUnwatched(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkUnwatched", reflect.TypeOf((*MockMovieRepository)(nil).MarkUnwatched), arg0, arg1)
}

// MarkWatched mocks base method.
func (m *MockMovieRepository) MarkWatched(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkWatched", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkWatched indicates an expected call of MarkWatched.
func (mr *MockMovieRepositoryMockRecorder) MarkWatched(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkWatched", reflect.TypeOf((*MockMovieRepository)(nil).MarkWatched), arg0, arg1)
}

// SearchMovies mocks base method.
func (m *MockMovieRepository) SearchMovies(arg0 string) ([]models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovies", arg0)
	ret0, _ := ret[0].([]models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovies indicates an expected call of SearchMovies.
func (mr *MockMovieRepositoryMockRecorder) SearchMovies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovies", reflect.TypeOf((*MockMovieRepository)(nil).SearchMovies), arg0)
}
