// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_kekEnd/internal/reviews (interfaces: UseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_1_kekEnd/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateReview mocks base method.
func (m *MockUseCase) CreateReview(arg0 *models.User, arg1 *models.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockUseCaseMockRecorder) CreateReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockUseCase)(nil).CreateReview), arg0, arg1)
}

// DeleteReview mocks base method.
func (m *MockUseCase) DeleteReview(arg0, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockUseCaseMockRecorder) DeleteReview(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockUseCase)(nil).DeleteReview), arg0, arg1, arg2)
}

// DeleteUserReviewForMovie mocks base method.
func (m *MockUseCase) DeleteUserReviewForMovie(arg0 *models.User, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserReviewForMovie", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserReviewForMovie indicates an expected call of DeleteUserReviewForMovie.
func (mr *MockUseCaseMockRecorder) DeleteUserReviewForMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserReviewForMovie", reflect.TypeOf((*MockUseCase)(nil).DeleteUserReviewForMovie), arg0, arg1)
}

// EditUserReviewForMovie mocks base method.
func (m *MockUseCase) EditUserReviewForMovie(arg0 *models.User, arg1 *models.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserReviewForMovie", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUserReviewForMovie indicates an expected call of EditUserReviewForMovie.
func (mr *MockUseCaseMockRecorder) EditUserReviewForMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserReviewForMovie", reflect.TypeOf((*MockUseCase)(nil).EditUserReviewForMovie), arg0, arg1)
}

// GetReviewsByMovie mocks base method.
func (m *MockUseCase) GetReviewsByMovie(arg0 string, arg1 int) (int, []*models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByMovie", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]*models.Review)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReviewsByMovie indicates an expected call of GetReviewsByMovie.
func (mr *MockUseCaseMockRecorder) GetReviewsByMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByMovie", reflect.TypeOf((*MockUseCase)(nil).GetReviewsByMovie), arg0, arg1)
}

// GetReviewsByUser mocks base method.
func (m *MockUseCase) GetReviewsByUser(arg0 string) ([]*models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByUser", arg0)
	ret0, _ := ret[0].([]*models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByUser indicates an expected call of GetReviewsByUser.
func (mr *MockUseCaseMockRecorder) GetReviewsByUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByUser", reflect.TypeOf((*MockUseCase)(nil).GetReviewsByUser), arg0)
}

// GetUserReviewForMovie mocks base method.
func (m *MockUseCase) GetUserReviewForMovie(arg0, arg1 string) (*models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReviewForMovie", arg0, arg1)
	ret0, _ := ret[0].(*models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReviewForMovie indicates an expected call of GetUserReviewForMovie.
func (mr *MockUseCaseMockRecorder) GetUserReviewForMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReviewForMovie", reflect.TypeOf((*MockUseCase)(nil).GetUserReviewForMovie), arg0, arg1)
}
