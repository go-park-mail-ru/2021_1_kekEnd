// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_kekEnd/internal/reviews (interfaces: ReviewRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_1_kekEnd/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockReviewRepository is a mock of ReviewRepository interface.
type MockReviewRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReviewRepositoryMockRecorder
}

// MockReviewRepositoryMockRecorder is the mock recorder for MockReviewRepository.
type MockReviewRepositoryMockRecorder struct {
	mock *MockReviewRepository
}

// NewMockReviewRepository creates a new mock instance.
func NewMockReviewRepository(ctrl *gomock.Controller) *MockReviewRepository {
	mock := &MockReviewRepository{ctrl: ctrl}
	mock.recorder = &MockReviewRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewRepository) EXPECT() *MockReviewRepositoryMockRecorder {
	return m.recorder
}

// CreateReview mocks base method.
func (m *MockReviewRepository) CreateReview(arg0 *models.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockReviewRepositoryMockRecorder) CreateReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockReviewRepository)(nil).CreateReview), arg0)
}

// DeleteReview mocks base method.
func (m *MockReviewRepository) DeleteReview(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockReviewRepositoryMockRecorder) DeleteReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockReviewRepository)(nil).DeleteReview), arg0, arg1)
}

// DeleteUserReviewForMovie mocks base method.
func (m *MockReviewRepository) DeleteUserReviewForMovie(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserReviewForMovie", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserReviewForMovie indicates an expected call of DeleteUserReviewForMovie.
func (mr *MockReviewRepositoryMockRecorder) DeleteUserReviewForMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserReviewForMovie", reflect.TypeOf((*MockReviewRepository)(nil).DeleteUserReviewForMovie), arg0, arg1)
}

// EditUserReviewForMovie mocks base method.
func (m *MockReviewRepository) EditUserReviewForMovie(arg0 *models.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserReviewForMovie", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUserReviewForMovie indicates an expected call of EditUserReviewForMovie.
func (mr *MockReviewRepositoryMockRecorder) EditUserReviewForMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserReviewForMovie", reflect.TypeOf((*MockReviewRepository)(nil).EditUserReviewForMovie), arg0)
}

// GetFeed mocks base method.
func (m *MockReviewRepository) GetFeed(arg0 []models.UserNoPassword) ([]models.ReviewFeedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", arg0)
	ret0, _ := ret[0].([]models.ReviewFeedItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockReviewRepositoryMockRecorder) GetFeed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockReviewRepository)(nil).GetFeed), arg0)
}

// GetMovieReviews mocks base method.
func (m *MockReviewRepository) GetMovieReviews(arg0 string, arg1 int) (int, []*models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieReviews", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]*models.Review)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMovieReviews indicates an expected call of GetMovieReviews.
func (mr *MockReviewRepositoryMockRecorder) GetMovieReviews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieReviews", reflect.TypeOf((*MockReviewRepository)(nil).GetMovieReviews), arg0, arg1)
}

// GetUserReviewForMovie mocks base method.
func (m *MockReviewRepository) GetUserReviewForMovie(arg0, arg1 string) (*models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReviewForMovie", arg0, arg1)
	ret0, _ := ret[0].(*models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReviewForMovie indicates an expected call of GetUserReviewForMovie.
func (mr *MockReviewRepositoryMockRecorder) GetUserReviewForMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReviewForMovie", reflect.TypeOf((*MockReviewRepository)(nil).GetUserReviewForMovie), arg0, arg1)
}

// GetUserReviews mocks base method.
func (m *MockReviewRepository) GetUserReviews(arg0 string) ([]*models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReviews", arg0)
	ret0, _ := ret[0].([]*models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReviews indicates an expected call of GetUserReviews.
func (mr *MockReviewRepositoryMockRecorder) GetUserReviews(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReviews", reflect.TypeOf((*MockReviewRepository)(nil).GetUserReviews), arg0)
}
