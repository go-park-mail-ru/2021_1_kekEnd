// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_kekEnd/internal/actors (interfaces: UseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_1_kekEnd/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetActor mocks base method.
func (m *MockUseCase) GetActor(arg0, arg1 string) (models.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", arg0, arg1)
	ret0, _ := ret[0].(models.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockUseCaseMockRecorder) GetActor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockUseCase)(nil).GetActor), arg0, arg1)
}

// LikeActor mocks base method.
func (m *MockUseCase) LikeActor(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeActor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeActor indicates an expected call of LikeActor.
func (mr *MockUseCaseMockRecorder) LikeActor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeActor", reflect.TypeOf((*MockUseCase)(nil).LikeActor), arg0, arg1)
}

// UnlikeActor mocks base method.
func (m *MockUseCase) UnlikeActor(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikeActor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlikeActor indicates an expected call of UnlikeActor.
func (mr *MockUseCaseMockRecorder) UnlikeActor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikeActor", reflect.TypeOf((*MockUseCase)(nil).UnlikeActor), arg0, arg1)
}
